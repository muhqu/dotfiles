#!/bin/bash
#
# The MIT License (MIT)
#
# Copyright (c) 2013 Mathias Leppich <mleppich@muhqu.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


SELF=$(basename $0)

main() {
  ACTION="toggle"
  if [ -n "$1" ]; then
    case "$1" in
      [oO][nN])
        ACTION="set_on"
        ;;
      [oO][fF][fF])
        ACTION="set_off"
        ;;
      toggle)
        ACTION="toggle"
        ;;
      status)
        ACTION="status"
        ;;
      help|-h|--help|-v)
        ACTION="help"
        ;;
      dialog)
        ACTION="dialog"
        ;;
      *)
        ACTION="usage"
        ;;
    esac
  fi

  case "$ACTION" in
    usage)  usage; ;;
    help)   help; ;;
    set_on) wifi  on; wifiStatus; ;;
    set_off)wifi off; wifiStatus; ;;
    toggle) isWifiOn && wifi off || wifi on; wifiStatus; ;;
    status) wifiStatus; ;;
    dialog) wifiDialog; ;;
  esac
}

usage() {
cat <<USAGE
Usage: $SELF [ on | off | toggle | status | dialog | help ]
USAGE
}

help() {
cat <<USAGE

  Usage: $SELF [ on | off | toggle |status | dialog | help ]

  Options:
    on        turn airportpower On and print status
    off       turn airportpower Off and print status
    toggle    turn airportpower On/Off and print status [default]
    status    just print airportpower status with exit code 0=on and 1=off
    dialog    open an apple script dialog to switch WiFi On/Off
    help      this screen

  Example:
    Use exit code as control structure:
        $ $SELF >/dev/null && echo ON || echo OFF

  Author:
    (c) 2013 Mathias Leppich - github.com/muhqu

USAGE
}

WIFI_DEVICE=""
wifiDevice() {
  if [[ -z "$WIFI_DEVICE" ]]; then
    WIFI_DEVICE=$(networksetup -listnetworkserviceorder | awk 'BEGIN{FS=": |\\)|\\("}/: Wi-Fi/{print $(NF-1);}')
  fi
  if [[ -z "$WIFI_DEVICE" ]]; then
    WIFI_DEVICE="en1"
  fi
  echo "$WIFI_DEVICE"
}

wifiStatus() {
    OUT=$(networksetup -getairportpower $(wifiDevice))
    echo "$OUT" # to show the output
    echo "$OUT" | grep -e 'On$' >/dev/null # to either return 0 or 1 exit code
}

isWifiOn() {
    networksetup -getairportpower $(wifiDevice) | grep -e 'On$' >/dev/null
}

wifi() {
    if [ -n "$1" ]; then
        networksetup -setairportpower $(wifiDevice) $1
    else
        networksetup -getairportpower $(wifiDevice)
    fi
}

wifiDialog() {
  OLD_WIFI_STATE=$(isWifiOn && echo "On" || echo "Off")
  WIFI_DIALOG_LOCK="/tmp/wifi-dialog-lock"
  [ $(find "$WIFI_DIALOG_LOCK" -mmin +30 2>/dev/null) ] && rm "$WIFI_DIALOG_LOCK"
  if [ ! -e "$WIFI_DIALOG_LOCK" ]; then
    touch /tmp/wifi-dialog-lock;
    NEW_WIFI_STATE=$(wifiDialogShow $OLD_WIFI_STATE)
    if [ "false" != "$NEW_WIFI_STATE" -a "$OLD_WIFI_STATE" != "$NEW_WIFI_STATE" ]; then
      wifi $NEW_WIFI_STATE;
    fi
    rm "$WIFI_DIALOG_LOCK"
  else 
    wifiDialogReactivate;
  fi
}

wifiDialogReactivate() {
  echo 'tell application "System Events" to activate' | osascript -s ho 2>&1
}

wifiDialogShow() {
  DEFAULT="$1"
  osascript -s ho - "$@" 2>&1 <<-APPLESCRIPT
set dialogTitle to "WiFi Switch"
tell application "System Events"
  activate
  --Choose from list
  set chosenListItem to false
  try
    with timeout of 5 seconds
      set chosenListItem to choose from list {"On", "Off"} ¬
            with title dialogTitle ¬
            with prompt "Turn WiFi..." ¬
            default items "$DEFAULT" ¬
            OK button name "OK!" ¬
            cancel button name "Nope, cancel" ¬
            multiple selections allowed false ¬
            with empty selection allowed
    end timeout
  on error errMsg number errNbr
    if errNbr = -1712 then -- timeout reached
       tell application process "System Events"
           tell window dialogTitle
               click button 2
           end tell
       end tell
   end if
  end try
  chosenListItem
end tell

APPLESCRIPT

}

main "$@";
