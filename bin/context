#!/bin/bash

SELF="$(basename $0)"

usage() {
    sed 's/SELF/'"$SELF"'/' <<'USAGE'
Usage: SELF [ -h | -l | -g | -c | [-s] NAME ]
USAGE
}

help() {
    sed 's/SELF/'"$SELF"'/' <<'HELP'
Usage: SELF [OPTIONS]

Options:
    -h, --help
    -l, --list
    -g, --guess
    -c, --current
    -s, --set NAME

HELP
}

VERBOSE=1

main() {
    ACTION="set";
    SET_CONTEXT="";
    until [ -z "$1" ]; do
        case "$1" in
            -h|-help|--help|help)
                help;
                exit 0;
                ;;
            -l|-list|--list|list)
                ACTION="list";
                shift;
                ;;
            -g|-guess|--guess|guess)
                ACTION="guess";
                VERBOSE=0;
                SET_CONTEXT="";
                shift;
                ;;
            -c|-current|--current|current)
                ACTION="current";
                VERBOSE=0;
                shift;
                ;;
            -s|-set|--set|set)
                ACTION="set";
                shift;
                ;;
            -*)
                echo >&2 "Error: invalid option $1"
                usage;
                exit 1;
                ;;
            *)
                SET_CONTEXT="$1";
                shift;
                ;;
        esac
    done

    case "$ACTION" in
        guess)
            echo $(guessContext)
            ;;
        current)
            echo $(cat /tmp/context.last 2>/dev/null)
            ;;
        list)
            availableContexts | xargs -n1
            ;;
        set)
            if [ -z "$SET_CONTEXT" ]; then 
                SET_CONTEXT="$(guessContext)"
            fi
            switchContext "$SET_CONTEXT"
            ;;
    esac
}

guessContext() {
    if isDeviceAvailable "Apple Cinema HD Display"; then 
        ctxt="home-desk"
    elif isDeviceAvailable "HubDevice@24130000"; then
        ctxt="work"
    elif [ "BigCow" == "$(currentWiFiAttr SSID)" ]; then
        ctxt="home-wifi"
    else
        ctxt="unknown"
    fi
    log "guessed context=$ctxt";
    echo "$ctxt"
}

switchContext() {
    next="$1"
    last=$(cat /tmp/context.last 2>/dev/null)
    if [ "$next" == "$last" ]; then 
        log "context '$next' already activated"
        if [ "$(find /tmp/context.last -mmin +5)" ]; then
            log "but it was last activated more than 5 min ago... so reactivate"
            activateContext "$next"
        fi
    else
        activateContext "$next"
    fi
}

availableContexts() {
    echo work home-desk home-wifi hotspot out
}

activateContext() {
    ctxt="$1"
    echo "$ctxt" > /tmp/context.last
    touch /tmp/context.last

    log "activate context: '$ctxt' BEGIN";
    
    logPrefix " >> $ctxt : ";
    case "$ctxt" in

    work )
        tunnelblickConnect "tadaa";
        startIfNotRunning "GeekTool Helper" "Dropbox" "Google Drive" "Sublime Text"
        activateIfNotRunning "Mail" "Adium"
        activateIfNotRunning "Skype" "Zoiper Communicator" "NetNewsWire" "iTunes"
        adiumStatus "@Speicherstadt"
        wifi off
        ;;

    home-desk|desk )
        tunnelblickConnect "tadaa";
        startIfNotRunning "GeekTool Helper" "Dropbox" "Google Drive" "Sublime Text"
        activateIfNotRunning "Skype" "iTunes" "Mail" "NetNewsWire"
        stopIfRunning "Zoiper Communicator"
        activateIfNotRunning "Adium"
        adiumStatus "@Home"
        wifi off
        ;;

    home-wifi|bigcow )
        tunnelblickDisconnect "tadaa";
        activateIfNotRunning "Skype" "Zoiper Communicator" "Mail" "NetNewsWire"
        activateIfNotRunning "Adium"
        adiumStatus "@Home"
        wifi on
        ;;

    hotspot )
        adiumStatus "Away"
        tunnelblickConnect "tadaa";
        stopIfRunning "GeekTool Helper" "Dropbox" "Google Drive" "NetNewsWire" \
                            "Adium" "Skype" "Zoiper Communicator" "iTunes" "Keychain"
        wifi off
        ;;

    out )
        adiumStatus "Away"
        tunnelblickDisconnect "tadaa";
        stopIfRunning "GeekTool Helper" "Dropbox" "Google Drive" "NetNewsWire" \
                            "Adium" "Skype" "Zoiper Communicator" "Dash" "iOS Simulator" \
                            "Safari" "Firefox" "Charles" "Keychain" "Contacts" "Calender" \
                            "Reminders" "Skitch" "Stickies" "Notes" "iTunes"
        wifi off
        ;;

    * )
        log "unknown context"
        ;;

    esac
    logPrefix "";
    log "activate context: '$ctxt' END";
}

activateIfNotRunning() {
    while [ -n "$1" ]; do
        debug "activateIfNotRunning: $1"
        isAppRunning "$1" || (log "activating $1 now..."; osascript -e 'tell app "'"$1"'" to activate');
        shift
    done
}

activateMinimizedIfNotRunning() {
    while [ -n "$1" ]; do
        debug "activateMinimizedIfNotRunning: $1"
        isAppRunning "$1" && (log "just minimize $1..."; activateMinimized "$1") || (log "activating $1 now..."; activateMinimized "$1");
        shift
    done
}

startIfNotRunning() {
    while [ -n "$1" ]; do
        debug "startIfNotRunning: $1"
        isAppRunning "$1" || (log "starting $1 now..."; open -g -a "$1");
        shift
    done
}

stopIfRunning() {
    while [ -n "$1" ]; do
        debug "stopIfRunning: $1"
        isAppRunning "$1" && (log "stoping $1 now..."; killall "$1" || osascript -e 'tell app "'"$1"'" to quit');
        shift
    done
}

isRunning() {
    appPid=$(echo "$processes" | awk '/'"$1"'[^\/]/{if ($2 != '$myPid') print $2}');
    test -n "$appPid"
}

isAppRunning() {
    osascript -s so - >/dev/null 2>&1 <<-APPLESCRIPT
tell app "System Events" to return process "$1"
APPLESCRIPT
}

activateMinimized() {
    osascript -s so - >/dev/null 2>&1 <<-APPLESCRIPT
tell app "$1" to activate
tell app "System Events" to keystroke "m" using {command down}
APPLESCRIPT
}

isWifiOn() {
    networksetup -getairportpower en1 | grep -e 'On$' >/dev/null
}

isDeviceAvailable() {
    ioreg -r -n "$1" | grep -v -E '^$' >/dev/null
}

currentWiFi() {
    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I
}
currentWiFiAttr() {
    currentWiFi | awk 'BEGIN{FS=": "}/ '"$1"':/{print $2}'
}

tunnelblickConnect() {
    log "tunnelblick connect $1 now...";
    osascript -s so - >/dev/null <<-APPLESCRIPT
tell app "Tunnelblick"
    if (state of first configuration whose name is "$1") is "EXITING" then
        connect "$1"
    end if
end tell
APPLESCRIPT
}

tunnelblickDisconnect() {
    log "tunnelblick disconnect $1 now...";
    osascript -s so - >/dev/null <<-APPLESCRIPT
tell app "Tunnelblick"
    disconnect "$1"
end tell
APPLESCRIPT
}

adiumStatus() {
    if isAppRunning "Adium"; then
        STATUS="$1"
        log "adium change status: $1";
        osascript -s so - >/dev/null <<-APPLESCRIPT
tell app "Adium"
    set global status to first status whose title is "$STATUS"
end tell
APPLESCRIPT

    fi
}

logPrefix() {
    logprefix="$@"
}
log() {
    #syslog -s -C -l Notice "$SELF: $logprefix$@"
    [[ $VERBOSE -ge 1 ]] && logger "Notice: $SELF: $logprefix$@" >/dev/null
    [[ $VERBOSE -ge 1 ]] && echo >&2 "$logprefix$@"
}
debug() {
    #syslog -s -C -l Debug "$SELF: $logprefix$@"
    [[ $VERBOSE -ge 2 ]] && logger "Debug: $SELF: $logprefix$@" >/dev/null
    [[ $VERBOSE -ge 2 ]] && echo >&2 "$logprefix$@"
}

main "$@";
